import numpy as np
from sympy import *
import math
def _ZTCS_(_P_,_T_,_zf_):   #
    zfs = len(_zf_)  # 组分数
    _P1_ = _P_/1000
    tycs = np.array([
        [0.443690, 0.115449],
        [1.284380, -0.920731],
        [0.356306, 1.70871],
        [0.544979, -0.270896],
        [0.528629, 0.349261],
        [0.484011, 0.754130],
        [0.0705233, -0.044448],
        [0.5040870, 1.32245],
        [0.0307452, 0.179433],
        [0.0732828, 0.463492],
        [0.0064500, -0.022143]])  # 通用常数AiBi
    wlcs = np.array([[190.69, 10.05, 0.013, 16.042],  # 甲烷
                     [283.05, 8.0653, 0.101, 8.05],  # 乙烯
                     [305.38, 6.7566, 0.1018, 30.068],  # 乙烷
                     [365.04, 5.5248, 0.15, 42.08],  # 丙烯
                     [369.89, 4.9994, 0.157, 44.094],  # 丙烷
                     [408.13, 3.8012, 0.183, 58.12],  # 异丁烷
                     [425.18, 3.9213, 0.197, 58.12],  # 正丁烷
                     [460.37, 3.2469, 0.226, 72.146],  # 异戊烷
                     [469.49, 3.2149, 0.252, 72.0146],  # 正戊烷
                     [507.28, 2.7167, 0.302, 86.172],  # 己烷
                     [540.28, 2.3467, 0.353, 100.198],  # 庚烷
                     [568.58, 2.0568, 0.412, 114.224],  # 辛烷
                     [594.57, 1.8421, 0.475, 178.25],  # 壬烷
                     [617.54, 1.6611, 0.54, 142.276],  # 癸烷
                     [639.99, 1.5154, 0.6, 156.3],  # 十一烷
                     [126.15, 11.099, 0.035, 28.016],  # 氮
                     [304.09, 10.638, 0.21, 44.01],  # 二氧化碳
                     [373.39, 10.526, 1.105, 34.076],  # 硫化氢
                     [33.2, 20, 0, 2.01588]  # 氢气
                     ])  # 纯物质的物理参数；临界温度；临界密度；偏心因子；相对分子质量#只给了18个物理参数
    zyxs = np.array([
        [0, 0.01, 0.01, 0.021, 0.023, 0.0275, 0.031, 0.036, 0.041, 0.05, 0.06, 0.07, 0.081, 0.092, 0.101, 0.025, 0.05,
         0.05, 0],
        [0, 0, 0, 0.003, 0.0031, 0.004, 0.0045, 0.005, 0.006, 0.007, 0.0085, 0.01, 0.012, 0.013, 0.015, 0.07, 0.048,
         0.045, 0],
        [0, 0, 0, 0.003, 0.0031, 0.004, 0.0045, 0.005, 0.006, 0.007, 0.0085, 0.01, 0.012, 0.013, 0.015, 0.07, 0.048,
         0.045, 0],
        [0, 0, 0, 0, 0, 0.003, 0.0035, 0.004, 0.0045, 0.005, 0.0065, 0.008, 0.01, 0.011, 0.013, 0.1, 0.045, 0.04, 0],
        [0, 0, 0, 0, 0, 0.003, 0.0035, 0.004, 0.0045, 0.005, 0.0065, 0.008, 0.01, 0.011, 0.013, 0.1, 0.045, 0.04, 0],
        [0, 0, 0, 0, 0, 0, 0, 0.008, 0.001, 0.0015, 0.0018, 0.002, 0.0025, 0.003, 0.003, 0.11, 0.05, 0.036, 0],
        [0, 0, 0, 0, 0, 0, 0, 0.008, 0.001, 0.0015, 0.0018, 0.002, 0.0025, 0.003, 0.003, 0.12, 0.05, 0.034, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.134, 0.05, 0.028, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.148, 0.05, 0.02, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.172, 0.05, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2, 0.05, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.228, 0.05, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.264, 0.05, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.294, 0.05, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.322, 0.05, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.035, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])  # 二元交互作用系数
    A = tycs[..., 0]  # 第一列通用常数Ai
    B = tycs[..., 1]  # 第二列通用常数Bi
    ljwd = wlcs[..., 0]  # 临界温度(K)
    ljmd = wlcs[..., 1]  # 临界密度(kmol/m³)
    pxyz = wlcs[..., 2]  # 偏心因子
    xdfzzl = wlcs[..., 3]  # 相对分子质量
    # 单组分BWRS中的系数
    B0 = np.zeros([zfs, 1])  # 创建参数B0的组分数行1列的0矩阵
    A0 = np.zeros([zfs, 1])
    C0 = np.zeros([zfs, 1])
    Y = np.zeros([zfs, 1])
    b = np.zeros([zfs, 1])
    a = np.zeros([zfs, 1])
    arf = np.zeros([zfs, 1])
    c = np.zeros([zfs, 1])
    D0 = np.zeros([zfs, 1])
    d = np.zeros([zfs, 1])
    E0 = np.zeros([zfs, 1])
    R = 8.314
    for i in range(0, zfs):  # np的数组的元素从0开始计数
        A0[i] = (R * ljwd[i] * (A[1] + B[1] * pxyz[i])) / ljmd[i]
        B0[i] = (A[0] + B[0] * pxyz[i]) / ljmd[i]
        C0[i] = (R * (ljwd[i] ** 3) * (A[2] + B[2] * pxyz[i])) / ljmd[i]
        Y[i] = (A[3] + B[3] * pxyz[i]) / (ljmd[i] ** 2)
        b[i] = (A[4] + B[4] * pxyz[i]) / (ljmd[i] ** 2)
        a[i] = (R * ljwd[i] * (A[5] + B[5] * pxyz[i])) / (ljmd[i] ** 2)
        arf[i] = (A[6] + B[6] * pxyz[i]) / (ljmd[i] ** 3)
        c[i] = (R * (ljwd[i] ** 3) * (A[7] + B[7] * pxyz[i])) / (ljmd[i] ** 2)
        D0[i] = (R * (ljwd[i] ** 4) * (A[8] + B[8] * pxyz[i])) / ljmd[i]
        d[i] = (R * (ljwd[i] ** 2) * (A[9] + B[9] * pxyz[i])) / (ljmd[i] ** 2)
        E0[i] = (R * (ljwd[i] ** 5) * (A[10] + B[10] * pxyz[i] * exp(-3.8 * pxyz[i]))) / ljmd[i]
    # 混合物质
    ZB = _zf_ # 占比；摩尔分数
    xZB = [i / 100 for i in ZB]
    yZB = [i / 100 for i in ZB]
    A0H_, B0H_, C0H_, D0H_, E0H_, aH1_, bH1_, cH1_, dH1_, YH1_, arfH1_, hhxdfzzl_ = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 最后一个混合相对分子质量
    for i in range(0, zfs):
        for j in range(0, zfs):
            A0H_ = A0H_ + xZB[i] * yZB[j] * (A0[i] ** 0.5) * (A0[j] ** 0.5) * (1 - zyxs[i, j])
            C0H_ = C0H_ + xZB[i] * yZB[j] * (C0[i] ** 0.5) * (C0[j] ** 0.5) * ((1 - zyxs[i, j]) ** 3)
            D0H_ = D0H_ + xZB[i] * yZB[j] * (D0[i] ** 0.5) * (D0[j] ** 0.5) * ((1 - zyxs[i, j]) ** 4)
            E0H_ = E0H_ + xZB[i] * yZB[j] * (E0[i] ** 0.5) * (E0[j] ** 0.5) * ((1 - zyxs[i, j]) ** 5)
        aH1_ = aH1_ + xZB[i] * a[i] ** (1 / 3)
        bH1_ = bH1_ + xZB[i] * b[i] ** (1 / 3)
        cH1_ = cH1_ + xZB[i] * c[i] ** (1 / 3)
        dH1_ = dH1_ + xZB[i] * d[i] ** (1 / 3)
        YH1_ = YH1_ + xZB[i] * Y[i] ** (1 / 2)
        arfH1_ = arfH1_ + xZB[i] * arf[i] ** (1 / 3)
        B0H_ = B0H_ + xZB[i] * B0[i]
        hhxdfzzl_ = hhxdfzzl_ + xdfzzl[i] * xZB[i]
    aH_ = aH1_ ** 3
    bH_ = bH1_ ** 3
    cH_ = cH1_ ** 3
    dH_ = dH1_ ** 3
    YH_ = YH1_ ** 2
    arfH_ = arfH1_ ** 3
    _A0H = A0H_.flatten()
    _C0H = C0H_.flatten()
    _D0H = D0H_.flatten()
    _E0H = E0H_.flatten()
    _B0H = B0H_.flatten()
    _hhxdfzzl = hhxdfzzl_.flatten()
    _aH = aH_.flatten()
    _bH = bH_.flatten()
    _cH = cH_.flatten()
    _dH = dH_.flatten()
    _YH = YH_.flatten()
    _arfH = arfH_.flatten()
    A0H = _A0H[0]
    C0H = _C0H[0]
    D0H = _D0H[0]
    E0H = _E0H[0]
    B0H = _B0H[0]
    hhxdfzzl = _hhxdfzzl[0]
    aH = _aH[0]
    bH = _bH[0]
    cH = _cH[0]
    dH = _dH[0]
    YH = _YH[0]
    arfH = _arfH[0]
    # 计算密度
    R = 8.3143  # (KJ/(kmol*K))
    JSMD = np.zeros([100, 1])
    JSMD[0] = 0
    JSMD[1] = _P1_ / (R * _T_)
    for m in range(0, 1000):
        f0 = JSMD[m] * R * _T_ + (B0H * R * _T_ - A0H - C0H / _T_ ** 2 + D0H / _T_ ** 3 - E0H / _T_ ** 4) * JSMD[m] ** 2 + \
             (bH * R * _T_ - aH - dH / _T_) * JSMD[m] ** 3 + arfH * (aH + dH / _T_) * JSMD[m] ** 6 + \
             (cH * JSMD[m] ** 3 / _T_ ** 2) * (1 + YH * JSMD[m] ** 2) * math.exp(-YH * JSMD[m] ** 2) - _P1_
        f1 = JSMD[m + 1] * R * _T_ + (B0H * R * _T_ - A0H - C0H / _T_ ** 2 + D0H / _T_ ** 3 - E0H / _T_ ** 4) * JSMD[m + 1] ** 2 + \
             (bH * R * _T_ - aH - dH / _T_) * JSMD[m + 1] ** 3 + arfH * (aH + dH / _T_) * JSMD[m + 1] ** 6 + \
             (cH * JSMD[m + 1] ** 3 / _T_ ** 2) * (1 + YH * JSMD[m + 1] ** 2) * math.exp(-YH * JSMD[m + 1] ** 2) - _P1_
        JSMD[m + 2] = (JSMD[m] * f1 - JSMD[m + 1] * f0) / (f1 - f0)
        if abs(JSMD[m + 2] - JSMD[m + 1]) < 0.001:
            break
    MD = JSMD[m + 2,0]  #kmol/m³
    ZLMD = MD*hhxdfzzl
    YSYZ = 1 + (B0H - A0H / R / _T_ - C0H / R / _T_ ** 3 + D0H / R / _T_ ** 4 - E0H / R / _T_ ** 5) * MD \
           + (bH - aH / R / _T_ - dH / R / _T_ ** 2) * MD ** 2 + (YH / R / _T_) * (aH + dH / _T_) * MD ** 5 \
           + (cH * MD ** 2 / R / _T_ ** 3) * (1 + YH * MD ** 2) * math.exp(-1 * YH * MD ** 2)
    # 计算焓
    CHCSZA = [135.84210, 379.2766, 385.4736, 377.0006, 382.4968, 393.1319, 403.4701, 309.809, 312.0396, 303.7124,
              294.7414, 275.4521, 0, 0, 0, -2.17251, 11.11374, -1.43705]
    CHCSZB = [2.39359, 1.10899, 0.72265, 0.19545, 0.4127, -0.1319, -0.0117, 0.95923, 0.7545, 0.72467, 0.7078, 0.85137,
              0, 0, 0, 1.06849, 0.47911, 0.99887]
    CHCSZ_C1 = [-22.18007, -1.88512, 7.08716, 25.23143, 20.28601, 35.41155, 33.16498, -6.14724, 2.61728, 3.67845,
                4.38048, -2.063041, 0, 0, 0, -1.34096, 7.62195, -1.84315]
    CHCSZC = [i * (10 ** -4) for i in CHCSZ_C1]
    CHCSZ_D1 = [57.4022, 39.6558, 29.23895, 1.95651, 7.02953, -13.33225, -11.7051, 61.42103, 43.66359, 41.42833,
                39.69342, 55.21815, 0, 0, 0, 2.15569, -3.59392, 5.57088]
    CHCSZD = [i * (10 ** -7) for i in CHCSZ_D1]
    CHCSZ_E1 = [-372.79, -314.0209, -261.5071, -77.26149, -102.5871, 25.14633, 19.96476, -616.0952, -448.4511,
                -424.0198, -404.3158, -563.1732, 0, 0, 0, -7.86319, 8.47438, -31.77336]
    CHCSZE = [i * (10 ** -11) for i in CHCSZ_E1]
    CHCSZ_F1 = [85.49685, 80.08189, 70.00448, 23.86087, 28.83394, -1.29589, -0.86652, 208.6819, 148.421, 137.3406,
                128.7595, 188.8545, 0, 0, 0, 0.69851, -0.57752, 6.36644]
    CHCSZF = [i * (10 ** -14) for i in CHCSZ_F1]
    HA, HB, HC, HD, HE, HF = 0, 0, 0, 0, 0, 0
    for i in range(0, zfs):
        HA = HA + (xZB[i] * xdfzzl[i] * CHCSZA[i]) / hhxdfzzl
        HB = HB + (xZB[i] * xdfzzl[i] * CHCSZB[i]) / hhxdfzzl
        HC = HC + (xZB[i] * xdfzzl[i] * CHCSZC[i]) / hhxdfzzl
        HD = HD + (xZB[i] * xdfzzl[i] * CHCSZD[i]) / hhxdfzzl
        HE = HE + (xZB[i] * xdfzzl[i] * CHCSZE[i]) / hhxdfzzl
        HF = HF + (xZB[i] * xdfzzl[i] * CHCSZF[i]) / hhxdfzzl
    # 计算H中的各个常数
    H_0 = HA + HB * _T_ + HC * _T_ ** 2 + HD * _T_ ** 3 + HE * _T_ ** 4 + HF * _T_ ** 5  # 计算理想气体参考下的焓
    H1 = 1000 * (H_0 * hhxdfzzl + (B0H * R * _T_ - 2 * A0H - 4 * C0H / _T_ ** 2 + 5 * D0H / _T_ ** 3 - 6 * E0H / _T_ ** 4) * MD + \
                0.5 * (2 * bH * R * _T_ - 3 * aH - 4 * dH / _T_) * MD ** 2 + 0.2 * arfH * (6 * aH + 7 * dH / _T_) * MD ** 5 + \
                (cH / YH / _T_ ** 2) * (3 - (3 + (YH * MD ** 2) / 2 - (YH ** 2) * (MD ** 4)) * math.e ** (-YH * MD ** 2)))
    H = H1 / hhxdfzzl#J/kg
    Cpp = 13.19 + 0.092 * _T_ - 6.24 * (10 ** -5) * _T_**2 + 1.915 * (10 ** 11) * hhxdfzzl * (_P1_ / 1000) ** 1.124 / (_T_ ** 5.08)
    pdwd = MD * R + (((B0H * R) + (2 * C0H / _T_ ** 3) - (3 * D0H / _T_ ** 4) + (4 * E0H / _T_ ** 5)) * MD ** 2) + (
            (bH * R) + (dH / _T_ ** 2)) * MD ** 3 - ((arfH * dH / _T_ ** 2) * MD ** 6)
    pdmd = R * _T_ + 2 * ((B0H * R * _T_) - A0H - (C0H / _T_ ** 2) + (D0H / _T_ ** 3) - (E0H / _T_ ** 4)) * MD + 3 * (
            bH * R * _T_ - aH - (dH / _T_)) * MD ** 2 + 6 * arfH * (aH + (dH / _T_)) * MD ** 5 + 3 * (
                   cH * MD ** 2 / _T_ ** 2) * (1 + YH * MD ** 2 - ((2 * YH * MD ** 4) / 3)) * math.exp(-YH * MD ** 2)
    Cv = Cpp - (_T_ / MD ** 2) * ((pdwd ** 2) / pdmd)
    KV = (MD * Cpp * pdmd) / (_P1_ * Cv)
    KT = 1 / (1 - (_P1_ * pdwd) / ((MD ** 2) * Cpp * pdmd))
    #计算Di
    Di = (1000/Cpp*((_T_/MD**2)*(pdwd/pdmd)-(1/MD)))
    return [hhxdfzzl, MD, ZLMD, YSYZ, H, Cpp, KV, KT, Di]
_P_ = 101325
_T_ = 293
_zf_ = [97.5, 0, 0.2, 0, 0.2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.6, 0.5, 0]
l =_ZTCS_(_P_,_T_,_zf_)
print(l)